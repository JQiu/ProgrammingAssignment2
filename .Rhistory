pwd
q()
setwd("C:/Programming/coursera/R-programming/ProgrammingAssignment2")
help inv
help
seq1 = seq(1:9)
mat1 <- matrix(seq1, 3)
mat1
solve(mat1)
mat1 <- matrix(rnorm(9), 3)
mat1
solve(mat1)
is.null(mat1)
mat2 <- matrix(rnorm(6),2)
mat1 == mat2
mat1
makeCacheMatrix(mat1)
load('cachematrix.R')
setwd("C:/Programming/coursera/R-programming/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
makeCacheMatrix(mat1)
t = makeCacheMatrix(mat1)
tinv = cacheSolve(t)
tinv
solve(mat1)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## Calculate the inverse of the matrix stored from calling makeCacheMatrix
##
## Args:
##    x: list of set / get functions from makeCacheMatrix
##
## Returns:
##    inverse of matrix stored in x
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
t = makeCacheMatrix(mat1)
tinv = cacheSolve(t)
library(datasets)
data(iris)
?iris
Sepal.Length
iris
mean(iris(:,1))
iris(:,1)
iris[:,1]
iris[,1]
mean(iris[,1])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
mean(iris[,2])
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
debug(ls)
ls
iris
with(iris, tapply(Sepal.Length, Species, mean))
apply(iris[, 1:4], 2, mean)
debug(ls)
ls
undebug(ls)
'ls'
debug(ls)
'ls'
help ls
ls
wd
debug(ls)
ls()
q
undebug(ls)
ls
